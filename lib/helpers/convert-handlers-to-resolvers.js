"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertHandlersToResolvers = void 0;

var _fp = _interopRequireDefault(require("lodash/fp"));

var _graphqlFields = _interopRequireDefault(require("graphql-fields"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const convertQueryHandlerToResolver = queryHandler => (_parent, args, context, info) => {
  const fields = (0, _graphqlFields.default)(info, {}, {
    processArguments: true
  });
  return queryHandler({ ...args.query,
    fields
  }, context).toPromise();
};

const mapQueryHandlerPairsToResolverPairs = _fp.default.map(pair => [pair[0], convertQueryHandlerToResolver(pair[1])]);

const mergeQueryResolverPairsToObject = _fp.default.reduce((acc, element) => ({ ...acc,
  [element[0]]: element[1]
}), {});

const convertQueryHandlers = _fp.default.pipe(_fp.default.toPairs, mapQueryHandlerPairsToResolverPairs, mergeQueryResolverPairsToObject);

const mergeCommandResolverPairsToObject = _fp.default.reduce((acc, element) => ({ ...acc,
  [element[0]]: element[1]
}), {});

const convertCommandHandlerToResolver = commandHandler => (args, context, info) => {
  const fields = (0, _graphqlFields.default)(info, {}, {
    processArguments: true
  });
  return commandHandler({ ...args.payload,
    fields
  }, context).toPromise();
};

const mapCommandHandlerPairsToResolverPairs = _fp.default.map(pair => [pair[0], convertCommandHandlerToResolver(pair[1])]);

const convertEntityCommandHandlersToEntityResolvers = _fp.default.pipe(_fp.default.toPairs, mapCommandHandlerPairsToResolverPairs, mergeCommandResolverPairsToObject);

const mapEntityCommandHandlerPairsToEntityResolverPairs = _fp.default.map(pair => [pair[0], () => convertEntityCommandHandlersToEntityResolvers(pair[1])]);

const mergeEntityCommandHandlersResolverPairsToObject = _fp.default.reduce((acc, element) => ({ ...acc,
  [element[0]]: element[1]
}), {});

const convertEntityCommandHandlers = _fp.default.pipe(_fp.default.toPairs, mapEntityCommandHandlerPairsToEntityResolverPairs, mergeEntityCommandHandlersResolverPairsToObject);

const convertHandlersToResolvers = handlers => ({
  Query: convertQueryHandlers(handlers.Query),
  Mutation: convertEntityCommandHandlers(handlers.Mutation)
});

exports.convertHandlersToResolvers = convertHandlersToResolvers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,