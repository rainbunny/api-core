"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertHandlersToResolvers = void 0;

var _fp = _interopRequireDefault(require("lodash/fp"));

var _graphqlFields = _interopRequireDefault(require("graphql-fields"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const convertQueryHandlerToResolver = queryHandler => (_parent, args, context, info) => {
  const fields = (0, _graphqlFields.default)(info, {}, {
    processArguments: true
  });
  return queryHandler({ ...args.query,
    fields: Object.keys(fields.data ? fields.data : fields)
  }, context).toPromise();
};

const mapQueryHandlerPairsToResolverPairs = _fp.default.map(pair => [pair[0], convertQueryHandlerToResolver(pair[1])]);

const mergeQueryResolverPairsToObject = _fp.default.reduce((acc, element) => ({ ...acc,
  [element[0]]: element[1]
}), {});

const convertQueryHandlers = _fp.default.pipe(_fp.default.toPairs, mapQueryHandlerPairsToResolverPairs, mergeQueryResolverPairsToObject);

const mergeCommandResolverPairsToObject = _fp.default.reduce((acc, element) => ({ ...acc,
  [element[0]]: element[1]
}), {});

const convertCommandHandlerToResolver = commandHandler => async (args, context, _info) => commandHandler(args.payload, context).toPromise();

const mapCommandHandlerPairsToResolverPairs = _fp.default.map(pair => [pair[0], convertCommandHandlerToResolver(pair[1])]);

const convertEntityCommandHandlersToEntityResolvers = _fp.default.pipe(_fp.default.toPairs, mapCommandHandlerPairsToResolverPairs, mergeCommandResolverPairsToObject);

const mapEntityCommandHandlerPairsToEntityResolverPairs = _fp.default.map(pair => [pair[0], () => convertEntityCommandHandlersToEntityResolvers(pair[1])]);

const mergeEntityCommandHandlersResolverPairsToObject = _fp.default.reduce((acc, element) => ({ ...acc,
  [element[0]]: element[1]
}), {});

const convertEntityCommandHandlers = _fp.default.pipe(_fp.default.toPairs, mapEntityCommandHandlerPairsToEntityResolverPairs, mergeEntityCommandHandlersResolverPairsToObject);

const convertHandlersToResolvers = handlers => ({
  Query: convertQueryHandlers(handlers.Query),
  Mutation: convertEntityCommandHandlers(handlers.Mutation)
});

exports.convertHandlersToResolvers = convertHandlersToResolvers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2NvbnZlcnQtaGFuZGxlcnMtdG8tcmVzb2x2ZXJzLnRzIl0sIm5hbWVzIjpbImNvbnZlcnRRdWVyeUhhbmRsZXJUb1Jlc29sdmVyIiwicXVlcnlIYW5kbGVyIiwiX3BhcmVudCIsImFyZ3MiLCJjb250ZXh0IiwiaW5mbyIsImZpZWxkcyIsInByb2Nlc3NBcmd1bWVudHMiLCJxdWVyeSIsIk9iamVjdCIsImtleXMiLCJkYXRhIiwidG9Qcm9taXNlIiwibWFwUXVlcnlIYW5kbGVyUGFpcnNUb1Jlc29sdmVyUGFpcnMiLCJfIiwibWFwIiwicGFpciIsIm1lcmdlUXVlcnlSZXNvbHZlclBhaXJzVG9PYmplY3QiLCJyZWR1Y2UiLCJhY2MiLCJlbGVtZW50IiwiY29udmVydFF1ZXJ5SGFuZGxlcnMiLCJwaXBlIiwidG9QYWlycyIsIm1lcmdlQ29tbWFuZFJlc29sdmVyUGFpcnNUb09iamVjdCIsImNvbnZlcnRDb21tYW5kSGFuZGxlclRvUmVzb2x2ZXIiLCJjb21tYW5kSGFuZGxlciIsIl9pbmZvIiwicGF5bG9hZCIsIm1hcENvbW1hbmRIYW5kbGVyUGFpcnNUb1Jlc29sdmVyUGFpcnMiLCJjb252ZXJ0RW50aXR5Q29tbWFuZEhhbmRsZXJzVG9FbnRpdHlSZXNvbHZlcnMiLCJtYXBFbnRpdHlDb21tYW5kSGFuZGxlclBhaXJzVG9FbnRpdHlSZXNvbHZlclBhaXJzIiwibWVyZ2VFbnRpdHlDb21tYW5kSGFuZGxlcnNSZXNvbHZlclBhaXJzVG9PYmplY3QiLCJjb252ZXJ0RW50aXR5Q29tbWFuZEhhbmRsZXJzIiwiY29udmVydEhhbmRsZXJzVG9SZXNvbHZlcnMiLCJoYW5kbGVycyIsIlF1ZXJ5IiwiTXV0YXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFVQTs7QUFDQTs7OztBQWFBLE1BQU1BLDZCQUE2QixHQU1qQ0MsWUFOb0MsSUFPQSxDQUFDQyxPQUFELEVBQVVDLElBQVYsRUFBZ0JDLE9BQWhCLEVBQXlCQyxJQUF6QixLQUFr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RitDLENBQTdDLENBQW5DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBDb21tYW5kLFxuICBDb21tYW5kSGFuZGxlcixcbiAgQ29tbWFuZFJlc29sdmVyLFxuICBFbnRpdHksXG4gIFF1ZXJ5LFxuICBRdWVyeUhhbmRsZXIsXG4gIFF1ZXJ5UmVzb2x2ZXIsXG4gIFF1ZXJ5UmVzdWx0LFxufSBmcm9tICdAbGliL2ludGVyZmFjZXMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoL2ZwJztcbmltcG9ydCBncmFwaHFsRmllbGRzIGZyb20gJ2dyYXBocWwtZmllbGRzJztcblxuaW50ZXJmYWNlIEhhbmRsZXJQYXJhbXMge1xuICBRdWVyeToge1tlbnRpdHlOYW1lOiBzdHJpbmddOiBRdWVyeUhhbmRsZXJ9O1xuICBNdXRhdGlvbjoge1tlbnRpdHlOYW1lOiBzdHJpbmddOiB7W2NvbW1hbmROYW1lOiBzdHJpbmddOiBDb21tYW5kSGFuZGxlcn19O1xufVxuXG5pbnRlcmZhY2UgSGFuZGxlclJlc3VsdCB7XG4gIFF1ZXJ5OiB7W2VudGl0eU5hbWU6IHN0cmluZ106IFF1ZXJ5UmVzb2x2ZXJ9O1xuICBNdXRhdGlvbjoge1tlbnRpdHlOYW1lOiBzdHJpbmddOiAoKSA9PiB7W2NvbW1hbmROYW1lOiBzdHJpbmddOiBDb21tYW5kUmVzb2x2ZXJ9fTtcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuY29uc3QgY29udmVydFF1ZXJ5SGFuZGxlclRvUmVzb2x2ZXIgPSA8XG4gIElkID0gc3RyaW5nLFxuICBFIGV4dGVuZHMgRW50aXR5PElkPiA9IEVudGl0eTxJZD4sXG4gIFEgZXh0ZW5kcyBRdWVyeSA9IFF1ZXJ5LFxuICBSZXN1bHQgZXh0ZW5kcyBRdWVyeVJlc3VsdDxFPiB8IEUgPSBRdWVyeVJlc3VsdDxFPiB8IEVcbj4oXG4gIHF1ZXJ5SGFuZGxlcjogUXVlcnlIYW5kbGVyPElkLCBFLCBRLCBSZXN1bHQ+LFxuKTogUXVlcnlSZXNvbHZlcjxJZCwgRSwgUSwgUmVzdWx0PiA9PiAoX3BhcmVudCwgYXJncywgY29udGV4dCwgaW5mbykgPT4ge1xuICBjb25zdCBmaWVsZHMgPSBncmFwaHFsRmllbGRzKGluZm8sIHt9LCB7cHJvY2Vzc0FyZ3VtZW50czogdHJ1ZX0pO1xuICByZXR1cm4gcXVlcnlIYW5kbGVyKHsuLi5hcmdzLnF1ZXJ5LCBmaWVsZHM6IE9iamVjdC5rZXlzKGZpZWxkcy5kYXRhID8gZmllbGRzLmRhdGEgOiBmaWVsZHMpfSwgY29udGV4dCkudG9Qcm9taXNlKCk7XG59O1xuXG5jb25zdCBtYXBRdWVyeUhhbmRsZXJQYWlyc1RvUmVzb2x2ZXJQYWlyczogKFxuICBsaXN0OiBbc3RyaW5nLCBRdWVyeUhhbmRsZXJdW10sXG4pID0+IFtzdHJpbmcsIFF1ZXJ5UmVzb2x2ZXJdW10gPSBfLm1hcCgocGFpcikgPT4gW3BhaXJbMF0sIGNvbnZlcnRRdWVyeUhhbmRsZXJUb1Jlc29sdmVyKHBhaXJbMV0pXSk7XG5cbmNvbnN0IG1lcmdlUXVlcnlSZXNvbHZlclBhaXJzVG9PYmplY3Q6IChcbiAgcGFpcnM6IFtzdHJpbmcsIFF1ZXJ5UmVzb2x2ZXJdW10sXG4pID0+IHtbZW50aXR5TmFtZTogc3RyaW5nXTogUXVlcnlSZXNvbHZlcn0gPSBfLnJlZHVjZSgoYWNjLCBlbGVtZW50KSA9PiAoey4uLmFjYywgW2VsZW1lbnRbMF1dOiBlbGVtZW50WzFdfSksIHt9KTtcblxuY29uc3QgY29udmVydFF1ZXJ5SGFuZGxlcnM6IChxdWVyeUhhbmRsZXJzOiB7XG4gIFtlbnRpdHlOYW1lOiBzdHJpbmddOiBRdWVyeUhhbmRsZXI7XG59KSA9PiB7W2VudGl0eU5hbWU6IHN0cmluZ106IFF1ZXJ5UmVzb2x2ZXJ9ID0gXy5waXBlKFxuICBfLnRvUGFpcnMsXG4gIG1hcFF1ZXJ5SGFuZGxlclBhaXJzVG9SZXNvbHZlclBhaXJzLFxuICBtZXJnZVF1ZXJ5UmVzb2x2ZXJQYWlyc1RvT2JqZWN0LFxuKTtcblxuY29uc3QgbWVyZ2VDb21tYW5kUmVzb2x2ZXJQYWlyc1RvT2JqZWN0OiAoXG4gIHBhaXJzOiBbc3RyaW5nLCBDb21tYW5kUmVzb2x2ZXJdW10sXG4pID0+IHtbZW50aXR5TmFtZTogc3RyaW5nXTogQ29tbWFuZFJlc29sdmVyfSA9IF8ucmVkdWNlKChhY2MsIGVsZW1lbnQpID0+ICh7Li4uYWNjLCBbZWxlbWVudFswXV06IGVsZW1lbnRbMV19KSwge30pO1xuXG5jb25zdCBjb252ZXJ0Q29tbWFuZEhhbmRsZXJUb1Jlc29sdmVyID0gPEMgZXh0ZW5kcyBDb21tYW5kPihcbiAgY29tbWFuZEhhbmRsZXI6IENvbW1hbmRIYW5kbGVyPEM+LFxuKTogQ29tbWFuZFJlc29sdmVyPEM+ID0+IGFzeW5jIChhcmdzLCBjb250ZXh0LCBfaW5mbykgPT4gY29tbWFuZEhhbmRsZXIoYXJncy5wYXlsb2FkLCBjb250ZXh0KS50b1Byb21pc2UoKTtcblxuY29uc3QgbWFwQ29tbWFuZEhhbmRsZXJQYWlyc1RvUmVzb2x2ZXJQYWlyczogKFxuICBsaXN0OiBbc3RyaW5nLCBDb21tYW5kSGFuZGxlcl1bXSxcbikgPT4gW3N0cmluZywgQ29tbWFuZFJlc29sdmVyXVtdID0gXy5tYXAoKHBhaXIpID0+IFtwYWlyWzBdLCBjb252ZXJ0Q29tbWFuZEhhbmRsZXJUb1Jlc29sdmVyKHBhaXJbMV0pXSk7XG5cbmNvbnN0IGNvbnZlcnRFbnRpdHlDb21tYW5kSGFuZGxlcnNUb0VudGl0eVJlc29sdmVyczogKGVudGl0eUNvbW1hbmRIYW5kbGVyczoge1xuICBbY29tbWFuZE5hbWU6IHN0cmluZ106IENvbW1hbmRIYW5kbGVyO1xufSkgPT4ge1tjb21tYW5kTmFtZTogc3RyaW5nXTogQ29tbWFuZFJlc29sdmVyfSA9IF8ucGlwZShcbiAgXy50b1BhaXJzLFxuICBtYXBDb21tYW5kSGFuZGxlclBhaXJzVG9SZXNvbHZlclBhaXJzLFxuICBtZXJnZUNvbW1hbmRSZXNvbHZlclBhaXJzVG9PYmplY3QsXG4pO1xuXG5jb25zdCBtYXBFbnRpdHlDb21tYW5kSGFuZGxlclBhaXJzVG9FbnRpdHlSZXNvbHZlclBhaXJzOiAoXG4gIGxpc3Q6IFtlbnRpdHlOYW1lOiBzdHJpbmcsIGVudGl0eUNvbW1hbmRIYW5kbGVyczoge1tjb21tYW5kTmFtZTogc3RyaW5nXTogQ29tbWFuZEhhbmRsZXJ9XVtdLFxuKSA9PiBbZW50aXR5TmFtZTogc3RyaW5nLCBlbnRpdHlDb21tYW5kUmVzb2x2ZXJzOiAoKSA9PiB7W2NvbW1hbmROYW1lOiBzdHJpbmddOiBDb21tYW5kUmVzb2x2ZXJ9XVtdID0gXy5tYXAoKHBhaXIpID0+IFtcbiAgcGFpclswXSxcbiAgKCkgPT4gY29udmVydEVudGl0eUNvbW1hbmRIYW5kbGVyc1RvRW50aXR5UmVzb2x2ZXJzKHBhaXJbMV0pLFxuXSk7XG5cbmNvbnN0IG1lcmdlRW50aXR5Q29tbWFuZEhhbmRsZXJzUmVzb2x2ZXJQYWlyc1RvT2JqZWN0OiAoXG4gIHBhaXJzOiBbZW50aXR5TmFtZTogc3RyaW5nLCBlbnRpdHlDb21tYW5kUmVzb2x2ZXJzOiAoKSA9PiB7W2NvbW1hbmROYW1lOiBzdHJpbmddOiBDb21tYW5kUmVzb2x2ZXJ9XVtdLFxuKSA9PiB7W2VudGl0eU5hbWU6IHN0cmluZ106ICgpID0+IHtbY29tbWFuZE5hbWU6IHN0cmluZ106IENvbW1hbmRSZXNvbHZlcn19ID0gXy5yZWR1Y2UoXG4gIChhY2MsIGVsZW1lbnQpID0+ICh7Li4uYWNjLCBbZWxlbWVudFswXV06IGVsZW1lbnRbMV19KSxcbiAge30sXG4pO1xuXG5jb25zdCBjb252ZXJ0RW50aXR5Q29tbWFuZEhhbmRsZXJzOiAoY29tbWFuZEhhbmRsZXJzOiB7XG4gIFtlbnRpdHlOYW1lOiBzdHJpbmddOiB7W2NvbW1hbmROYW1lOiBzdHJpbmddOiBDb21tYW5kSGFuZGxlcn07XG59KSA9PiB7W2VudGl0eU5hbWU6IHN0cmluZ106ICgpID0+IHtbY29tbWFuZE5hbWU6IHN0cmluZ106IENvbW1hbmRSZXNvbHZlcn19ID0gXy5waXBlKFxuICBfLnRvUGFpcnMsXG4gIG1hcEVudGl0eUNvbW1hbmRIYW5kbGVyUGFpcnNUb0VudGl0eVJlc29sdmVyUGFpcnMsXG4gIG1lcmdlRW50aXR5Q29tbWFuZEhhbmRsZXJzUmVzb2x2ZXJQYWlyc1RvT2JqZWN0LFxuKTtcblxuZXhwb3J0IGNvbnN0IGNvbnZlcnRIYW5kbGVyc1RvUmVzb2x2ZXJzID0gKGhhbmRsZXJzOiBIYW5kbGVyUGFyYW1zKTogSGFuZGxlclJlc3VsdCA9PiAoe1xuICBRdWVyeTogY29udmVydFF1ZXJ5SGFuZGxlcnMoaGFuZGxlcnMuUXVlcnkpLFxuICBNdXRhdGlvbjogY29udmVydEVudGl0eUNvbW1hbmRIYW5kbGVycyhoYW5kbGVycy5NdXRhdGlvbiksXG59KTtcbiJdfQ==